// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "@hey-api/client-fetch";
import { client as _heyApiClient } from "./client.gen";
import type {
  GetAllTimelogsData,
  GetAllTimelogsResponses,
  GetSummaryData,
  GetSummaryResponses,
  GetUsersData,
  GetUsersResponses,
  GetUserTimelogsData,
  GetUserTimelogsErrors,
  GetUserTimelogsResponses,
  PingData,
  PingResponses,
  SavePostTestData,
  SavePostTestErrors,
  SavePostTestResponses,
  SavePreTestData,
  SavePreTestErrors,
  SavePreTestResponses,
  SaveTimelogData,
  SaveTimelogErrors,
  SaveTimelogResponses,
  SaveUserData,
  SaveUserErrors,
  SaveUserResponses,
} from "./types.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> =
  ClientOptions<TData, ThrowOnError>
  & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get user data and timelogs summary for the admin dashboard.
 */
export const getSummary = <ThrowOnError extends boolean = false>(options?: Options<GetSummaryData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetSummaryResponses, unknown, ThrowOnError>({
    url: "/dashboard",
    ...options
  });
};

/**
 * Get a list of all saved timelogs.
 */
export const getAllTimelogs = <ThrowOnError extends boolean = false>(options?: Options<GetAllTimelogsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetAllTimelogsResponses, unknown, ThrowOnError>({
    url: "/timelogs",
    ...options
  });
};

/**
 * Save a timelog.
 */
export const saveTimelog = <ThrowOnError extends boolean = false>(options: Options<SaveTimelogData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<SaveTimelogResponses, SaveTimelogErrors, ThrowOnError>({
    url: "/timelogs",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers
    }
  });
};

/**
 * Get a list of all registered users.
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetUsersResponses, unknown, ThrowOnError>({
    url: "/users",
    ...options
  });
};

/**
 * Register a new user.
 */
export const saveUser = <ThrowOnError extends boolean = false>(options: Options<SaveUserData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<SaveUserResponses, SaveUserErrors, ThrowOnError>({
    url: "/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers
    }
  });
};

/**
 * Get a list of timelogs associated with a user.
 */
export const getUserTimelogs = <ThrowOnError extends boolean = false>(options: Options<GetUserTimelogsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetUserTimelogsResponses, GetUserTimelogsErrors, ThrowOnError>({
    url: "/users/{id}/timelogs",
    ...options
  });
};

export const savePreTest = <ThrowOnError extends boolean = false>(options: Options<SavePreTestData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<SavePreTestResponses, SavePreTestErrors, ThrowOnError>({
    url: "/forms/pre-test",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers
    }
  });
};

export const savePostTest = <ThrowOnError extends boolean = false>(options: Options<SavePostTestData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<SavePostTestResponses, SavePostTestErrors, ThrowOnError>({
    url: "/forms/post-test",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers
    }
  });
};

export const ping = <ThrowOnError extends boolean = false>(options?: Options<PingData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<PingResponses, unknown, ThrowOnError>({
    url: "/ping",
    ...options
  });
};
